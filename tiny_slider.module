<?php
/**
 * @file
 * Tiny Slider API, theming, libraries, etc.
 */


/**
 * Implements hook_views_api().
 */
function tiny_slider_views_api() {
  return [
    'api' => '3',
    'path' => backdrop_get_path('module', 'tiny_slider'),
  ];
}

/**
 * Implements hook_config_info().
 */
function tiny_slider_config_info() {
  $prefixes['tiny_slider.settings'] = [
    'label' => t('Tiny Slider settings'),
    'group' => t('Configuration'),
  ];
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function tiny_slider_menu() {
  $items['admin/config/development/tiny_slider'] = [
    'title' => 'Tiny Slider Configuration',
    'description' => 'Configure settings related to the Tiny Slider library.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['tiny_slider_settings_form'],
    'access arguments' => ['administer site configuration'],
  ];

  return $items;
}

/**
 * Admin settings menu callback.
 *
 * @see tiny_slider_menu()
 */
function tiny_slider_settings_form() {
  $form['tiny_slider_library_info'] = [
    '#type' => 'radios',
    '#title' => t('Tiny Slider library location'),
    '#description' => t('If serving the files from a local path, the library MUST be located in  the module directory libraries/tiny-slider.  See the module README file for more information.'),
    '#options' => [
      'cdn' => t('Cloudflare CDN'),
      'local' => t('Local path (Tiny Slider libraries)'),
    ],
    '#default_value' => config_get('tiny_slider.settings', 'library'),
  ];
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  ];
  return $form;
}

/**
 * Submit callback for tiny_slider_settings_form.
 */
function tiny_slider_settings_form_submit($form, &$form_state) {
  $config = config('tiny_slider.settings');
  $config->set('library', $form_state['values']['tiny_slider_library_info']);
  $config->save();
  backdrop_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_library().
 *
 * The css_library_group variable provides backward
 * compatibility for sites that originally installed version 7.x-3.0 which gave
 * the Tiny Slider CSS libraries a weight of 200.
 *
 * @todo Remove this variable in the next major version of the module.
 *
 */
function tiny_slider_library_info() {
  $config = config('tiny_slider.settings');
  $libraries = [];

  $libraries['tinyslider.local'] = [
    'title' => 'tiny_slider',
    'website' => 'https://github.com/ganlanyuan/tiny-slider',
    'version' => '2.9.3',
    'js' => [
      'tiny-slider.js' => [
        'data' => backdrop_get_path('module', 'tiny_slider') . '/libraries/tiny-slider/dist/tiny-slider.js',
        'type' => 'external',
        'group' => JS_LIBRARY,
      ],
      'tiny_slider.js' => [
        'data' => backdrop_get_path('module', 'tiny_slider') . '/js/tiny_slider.js',
        'type' => 'external',
        'group' => JS_LIBRARY,
      ],

    ],
    'css' => [
      'tiny-slider.css' => [
        'data' => backdrop_get_path('module', 'tiny_slider') . '/libraries/tiny-slider/dist/tiny-slider.css',
        'type' => 'external',
        'group' => CSS_DEFAULT,
      ],
      'tiny_slider.css' => [
        'data' => backdrop_get_path('module', 'tiny_slider') . '/css/tiny_slider.css',
        'type' => 'external',
        'group' => CSS_DEFAULT,
      ],
    ],
  ];

  $libraries['tinyslider.cdn'] = [
    'title' => 'tiny_slider',
    'website' => 'https://github.com/ganlanyuan/tiny-slider',
    'version' => '2.9.3',
    'js' => [
      'tiny-slider.js' => [
        'data' => 'https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.3/min/tiny-slider.js',
        'type' => 'external',
        'group' => JS_LIBRARY,
      ],
      'tiny_slider.js' => [
        'data' => backdrop_get_path('module', 'tiny_slider') . '/js/tiny_slider.js',
        'type' => 'external',
        'group' => JS_LIBRARY,
      ],
    ],
    'css' => [
      'tiny-slider.css' => [
        'data' => 'https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.3/tiny-slider.css',
        'type' => 'external',
        'group' => $config->get('css_library_group'),
      ],
      'tiny_slider.css' => [
        'data' => backdrop_get_path('module', 'tiny_slider') . '/css/tiny_slider.css',
        'type' => 'external',
        'group' => CSS_DEFAULT,
      ],
    ],
  ];

  return $libraries;
}


/**
 * Implements hook_autoload_info().
 */
function tiny_slider_autoload_info() {
  return [
    'tiny_slider_plugin_style_tinyslider' => 'tiny_slider_plugin_style_tinyslider.inc',
  ];
}

/**
 * Default settings for Tiny slider.
 *
 * @return array|string
 */
function _tiny_slider_default_settings($key = NULL) {
  $settings = [
    'image_style' => '',
    'responsive_image_style' => '',
    'image_link' => '',
    'items' => 1,
    'gutter' => '0',
    'nav' => TRUE,
    'navPosition' => 'top',
    'navAsThumbnails' => FALSE,
    'autoplay' => FALSE,
    'autoplayButtonOutput' => FALSE,
    'autoplayTextStart' => 'start',
    'autoplayTextStop' => 'stop',
    'autoplayHoverPause' => FALSE,
    'autoplayPosition' => 'top',
    'controls' => TRUE,
    'controlsPosition' => 'top',
    'controlsTextPrev' => 'prev',
    'controlsTextNext' => 'next',
    'slideBy' => '1',
    'arrowKeys' => FALSE,
    'mouseDrag' => FALSE,
    'loop' => TRUE,
    'center' => FALSE,
    'speed' => 300,
    'advancedMode' => FALSE,
    'configJson' => '[]',
  ];

  return ($key && isset($settings[$key])) ? $settings[$key] : $settings;
}

/**
 * Return formatted js array of settings.
 */
function _tiny_slider_format_settings($settings) {
  $settings['items'] = (float) $settings['items'];

  $settings['gutter'] = (int) $settings['gutter'];
  $settings['nav'] = (bool) $settings['nav'];
  $settings['navPosition'] = (string) $settings['navPosition'];
  $settings['navAsThumbnails'] = (bool) $settings['navAsThumbnails'];
  $settings['autoplay'] = (bool) $settings['autoplay'];
  $settings['autoplayHoverPause'] = (bool) $settings['autoplayHoverPause'];
  $settings['autoplayButtonOutput'] = (bool) $settings['autoplayButtonOutput'];
  $settings['autoplayPosition'] = (string) $settings['autoplayPosition'];
  $settings['autoplayText'] = (array) [
    (string) $settings['autoplayTextStart'],
    (string) $settings['autoplayTextStop'],
  ];
  $settings['controls'] = (bool) $settings['controls'];
  $settings['controlsPosition'] = (string) $settings['controlsPosition'];
  $settings['controlsText'] = (array) [
    (string) $settings['controlsTextPrev'],
    (string) $settings['controlsTextNext'],
  ];
  $settings['slideBy'] = (string) $settings['slideBy'];
  $settings['arrowKeys'] = (bool) $settings['arrowKeys'];
  $settings['mouseDrag'] = (bool) $settings['mouseDrag'];
  $settings['loop'] = (bool) $settings['loop'];
  $settings['center'] = (bool) $settings['center'];
  $settings['speed'] = (int) $settings['speed'];

  if ($settings['itemsMobile']) {
    $dimensionMobile = (int) $settings['dimensionMobile'];
    $itemsMobile['items'] = (float) $settings['itemsMobile'];
    $settings['responsive'][$dimensionMobile] = $itemsMobile;
  }

  if ($settings['itemsDesktop']) {
    $dimensionDesktop = (int) $settings['dimensionDesktop'];
    $itemsDesktop['items'] = (float) $settings['itemsDesktop'];
    $settings['responsive'][$dimensionDesktop] = $itemsDesktop;
  }

  if ($settings['navAsThumbnails']) {
    ;
    $settings['navContainer'] = '.thumbs-slider[data-field-id="' . $settings['uniqueFieldID'] . '"]';
  }

  if (isset($settings['image_style'])) {
    unset($settings['image_style']);
  }

  if (isset($settings['responsive_image_style'])) {
    unset($settings['responsive_image_style']);
  }

  if (isset($settings['image_link'])) {
    unset($settings['image_link']);
  }

  $settings['advancedMode'] = (bool) $settings['advancedMode'];

  $config_json = json_decode($settings['configJson']);
  $settings['configJson'] = json_encode($config_json);

  return $settings;
}

function defaultSettings($key = NULL) {
  $settings = [
    'image_style' => '',
    'responsive_image_style' => '',
    'image_link' => '',
    'items' => 1,
    'slideBy' => 'page',
    'gutter' => '0',
    'mode' => 'carousel',
    'nav' => TRUE,
    'navPosition' => 'top',
    'navAsThumbnails' => FALSE,
    'autoplay' => FALSE,
    'autoplayHoverPause' => FALSE,
    'autoplayButtonOutput' => FALSE,
    'autoplayPosition' => 'top',
    'autoplayTextStart' => 'start',
    'autoplayTextStop' => 'stop',
    'controls' => TRUE,
    'controlsPosition' => 'top',
    'controlsTextPrev' => 'prev',
    'controlsTextNext' => 'next',
    'arrowKeys' => FALSE,
    'mouseDrag' => FALSE,
    'loop' => TRUE,
    'center' => FALSE,
    'speed' => 300,
    'dimensionMobile' => '0',
    'itemsMobile' => NULL,
    'dimensionDesktop' => '0',
    'itemsDesktop' => NULL,
    'advancedMode' => FALSE,
    'configJson' => '[]',
  ];

  return isset($settings[$key]) ? $settings[$key] : $settings;
}

/**
 * Return formatted js array of settings.
 */
function formatSettings($settings) {
  $settings['items'] = (int) $settings['items'];
  $settings['slideBy'] = (string) $settings['slideBy'];
  $settings['gutter'] = (int) $settings['gutter'];
  $settings['mode'] = (string) $settings['mode'];
  $settings['nav'] = (bool) $settings['nav'];
  $settings['navPosition'] = (string) $settings['navPosition'];
  $settings['navAsThumbnails'] = (bool) $settings['navAsThumbnails'];
  $settings['autoplay'] = (bool) $settings['autoplay'];
  $settings['autoplayHoverPause'] = (bool) $settings['autoplayHoverPause'];
  $settings['autoplayButtonOutput'] = (bool) $settings['autoplayButtonOutput'];
  $settings['autoplayPosition'] = (string) $settings['autoplayPosition'];
  $settings['autoplayText'] = (array) [
    (string) $settings['autoplayTextStart'],
    (string) $settings['autoplayTextStop'],
  ];
  $settings['controls'] = (bool) $settings['controls'];
  $settings['controlsPosition'] = (string) $settings['controlsPosition'];
  $settings['controlsText'] = (array) [
    (string) $settings['controlsTextPrev'],
    (string) $settings['controlsTextNext'],
  ];
  $settings['arrowKeys'] = (bool) $settings['arrowKeys'];
  $settings['mouseDrag'] = (bool) $settings['mouseDrag'];
  $settings['loop'] = (bool) $settings['loop'];
  $settings['center'] = (bool) $settings['center'];
  $settings['speed'] = (string) $settings['speed'];

  if ($settings['itemsMobile']) {
    $dimensionMobile = (int) $settings['dimensionMobile'];
    $itemsMobile['items'] = (int) $settings['itemsMobile'];
    $settings['responsive'][$dimensionMobile] = $itemsMobile;
  }

  if ($settings['itemsDesktop']) {
    $dimensionDesktop = (int) $settings['dimensionDesktop'];
    $itemsDesktop['items'] = (int) $settings['itemsDesktop'];
    $settings['responsive'][$dimensionDesktop] = $itemsDesktop;
  }

  if (isset($settings['image_style'])) {
    unset($settings['image_style']);
  }

  if (isset($settings['responsive_image_style'])) {
    unset($settings['responsive_image_style']);
  }

  if (isset($settings['image_link'])) {
    unset($settings['image_link']);
  }

  $settings['advancedMode'] = (bool) $settings['advancedMode'];

  return $settings;
}

/**
 * Checks if the provided string is a valid JSON.
 *
 * @return bool
 */
function isValidJson($string) {
  if ($string === "" || $string === "null" || $string === "[]") {
    return FALSE;
  }

  json_decode($string);
  return json_last_error() === JSON_ERROR_NONE;
}
